// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Start with SQLite, migrate to PostgreSQL later
  url      = env("DATABASE_URL")
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  name          String?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Add household relation
  household   Household? @relation(fields: [householdId], references: [id])
  householdId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// New models for the Life Planner functionality

model AnalyzedEvent {
  id          String    @id @default(cuid())
  eventId     String    @unique // Google Calendar ID
  household   Household @relation(fields: [householdId], references: [id])
  householdId String

  eventTitle String
  eventStart DateTime
  eventEnd   DateTime
  eventData  String // Store as JSON string

  // Analysis results
  eventType            String // work, social, travel, appointment, family, other
  requiresSitter       Boolean @default(false)
  requiresTravel       Boolean @default(false)
  requiresFormalAttire Boolean @default(false)

  analysisData String // Store as JSON string

  tasks SuggestedTask[]

  analyzedAt   DateTime @default(now())
  lastModified String? // Google Calendar etag for change detection

  @@index([householdId, eventStart])
}

model SuggestedTask {
  id String @id @default(cuid())

  analyzedEvent   AnalyzedEvent @relation(fields: [analyzedEventId], references: [id])
  analyzedEventId String

  household   Household @relation(fields: [householdId], references: [id])
  householdId String

  title       String
  description String?
  type        String // booking, shopping, preparation, reminder
  priority    String // high, medium, low
  dueDate     DateTime

  status String @default("pending") // pending, completed, dismissed

  createdAt   DateTime  @default(now())
  completedAt DateTime?
  dismissedAt DateTime?

  @@index([householdId, status, dueDate])
  @@index([analyzedEventId])
}



model Household {
  id            String    @id @default(cuid())
  name          String
  
  users         User[]
  analyzedEvents AnalyzedEvent[]
  suggestedTasks SuggestedTask[]
  settings      HouseholdSettings?
  knowledgeBase KnowledgeBase[]
  
  createdAt     DateTime  @default(now())
}

model HouseholdSettings {
  id            String    @id @default(cuid())
  household     Household @relation(fields: [householdId], references: [id])
  householdId   String    @unique
  
  // Calendar settings
  selectedCalendars String?  // JSON array of calendar IDs
  
  // Location settings
  homeCity      String?
  homeState     String?
  homeCountry   String?
  workAddress   String?
  
  // Family settings
  familyMembers String?   // JSON array of family members
  
  // Timing preferences
  bookFlightsDaysAhead  Int @default(60)
  bookSitterDaysAhead   Int @default(14)
  bookHotelsDaysAhead   Int @default(30)
  
  // Sitter settings
  defaultSitterNeeded   Boolean @default(true)
  sitterStartTime       Int     @default(18)
  sitterExceptions      String? // JSON array
  
  // Travel settings
  drivingRadiusMiles    Int     @default(50)
  preferredAirports     String? // JSON array
  
  // AI Context
  customContext         String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model KnowledgeBase {
  id            String    @id @default(cuid())
  household     Household @relation(fields: [householdId], references: [id])
  householdId   String
  
  category      String    // "location", "person", "pattern", "preference"
  key           String    // "Winchester", "book club", "gym"
  value         Json      // {means: "mom's house", noSitter: true, travel: false}
  
  confidence    Float     @default(1.0)
  learnedFrom   String?   // "user_taught", "inferred", "corrected"
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@unique([householdId, category, key])
  @@index([householdId, category])
}